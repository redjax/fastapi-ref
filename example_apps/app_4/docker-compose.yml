version: "3.8"

networks:
  backend:
  frontend:

volumes:
  pgadmin_data:

services:

  api:
    container_name: fastapi-ref_ex
    restart: unless-stopped
    env_file:
      - ./env_files/app.env
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /app
    command: python start_server.py
    volumes:
      - ${APP_API_DIR:-./app}:/app
    environment:
      DYNACONF_ENV: ${ENV:-prod}
      DYNACONF_APP_TITLE: ${APP_TITLE:-Example Dockerized FastAPI}
      DYNACONF_APP_DESCRIPTION: ${APP_DESCRIPTION:-An example FastAPI app in Docker, with Postgres & NGINX}
      DYNACONF_APP_VERSION: ${APP_VERSION:-0.1.0}
      DYNACONF_APP_HOST: ${APP_HOST:-0.0.0.0}
      DYNACONF_APP_PORT: ${APP_PORT:-8000}
      DYNACONF_APP_RELOAD: ${APP_RELOAD:-false}
      DYNACONF_APP_DEBUG: ${APP_DEBUG:-false}
      DYNACONF_API_ORIGINS: ${API_ORIGINS:-["*"]}
      DYNACONF_API_V1_PATH: ${API_V1_PATH:-/api/v1}
      DYNACONF_DB_TYPE: ${DB_TYPE:-postgres}
      DYNACONF_DB_HOST: ${DB_HOST:-db}
      DYNACONF_DB_USERNAME: ${DB_USERNAME:-postgres}
      DYNACONF_DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DYNACONF_DB_PORT: ${DB_PORT:-5432}
      DYNACONF_DB_DATABASE: ${DB_DATABASE:-demo}
      ## Force Dynaconf to load vars from env before settings.toml files
      DYNACONF_ALWAYS_LOAD_ENV_VARS: 1
    # ports:
    #   - ${APP_HOST_PORT:-8000}
    healthcheck:
      test: curl --fail http://api:8000/health
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  proxy:
    image: nginx:latest
    container_name: fastapi-ref_ex_proxy
    restart: unless-stopped
    environment:
      API_SERVER_URL: ${NGINX_API_SERVER_URL:-localhost}
    volumes:
      - ${NGINX_CONF_FILE:-./proxy/nginx/nginx.conf}:/etc/nginx/nginx.conf
      - ${NGINX_SITES_ENABLED_DIR:-./proxy/nginx/conf/sites-enabled}:/etc/nginx/sites-enabled
      - ${NGINX_CONF_EXTRA_DIR:-./proxy/nginx/conf/extra}:/etc/nginx/extra
      - ${NGINX_LOGS_DIR:-./proxy/nginx/logs}:/var/log/nginx
    ports:
      - ${NGINX_HTTP_PORT:-80}:80
    networks:
      - backend
      - frontend

  db:
    image: postgres:${POSTGRES_IMAGE_TAG:-bullseye}
    container_name: fastapi-ref_ex_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      # Read section on this variable in docker docs before setting:
      #   https://hub.docker.com/_/postgres/
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD}
    expose:
      - 5432
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - ${POSTGRES_DATA_DIR:-./db/postgres/data}:/var/lib/postgresql/data
      # Mount directory with init scripts for docker, i.e. install UUID extension
      - ./db/postgres/pg_entrypoint:/docker-entrypoint-initdb.d/
      # Mount directory to store SQL scripts
      - ${POSTGRES_SCRIPTS_DIR:-./db/postgres/pgsql_scripts}:/scripts
      # Uncomment line below to restore a database backup.
      # - ${POSTGRES_DB_BACKUP}:/path/here
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_IMAGE_TAG:-latest}
    container_name: ${PGADMIN_CONTAINER_NAME:-fastapi-ref_ex_pgadmin}
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-pgadmin}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT:-80}
    ports:
      - ${PGADMIN_PORT:-15432}:80
    volumes:
      - ${PGADMIN_DATA_DIR:-pgadmin_data}:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - backend
      - frontend
